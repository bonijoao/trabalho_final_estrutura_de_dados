---
title: "Filas e Pilhas em Online Machine Learning : Janelas Deslizantes e Detecção de Drifts"
subtitle: "Projeto de Estruturas de Dados - GES 115"
date: today
date-format: long
lang: "pt-BR"
author: "João Paulo Assis Bonifácio"
format:
    html:
        toc: true
        toc-depth: 2
        toc-title: "Índice"
        number_sections: true
        code-tools: true
        code-tools-position: right
        echo: false
        embed-resources: true
        theme: cosmo
        navbar:
          right:
            - icon: github
              href: https://github.com/bonijoao/trabalho_final_estrutura_de_dados
              text: "GitHub"
---


## Introdução

Estruturas de dados são componentes fundamentais da Ciência da Computação, influenciando diretamente o desempenho de aplicações práticas. Entre as mais versáteis estão as **pilhas** e **filas**, que seguem os princípios **LIFO** (*Last In, First Out*) e **FIFO** (*First In, First Out*), respectivamente. Embora simples em sua concepção, essas estruturas possuem ampla aplicação em problemas do mundo real.

No contexto de **Online Machine Learning (OML)**, onde dados são processados sequencialmente à medida que chegam, essas estruturas se tornam essenciais. **Filas** permitem a construção de **janelas deslizantes (sliding windows)** — subconjuntos móveis de dados que priorizam registros mais recentes, descartando os mais antigos. Esse mecanismo é crucial para a detecção de **concept drifts**, mudanças nas distribuições dos dados ao longo do tempo.

**Pilhas**, por sua vez, são úteis para identificar **máximos e mínimos locais** em séries temporais. Esses pontos de inflexão podem sinalizar mudanças abruptas no comportamento do sistema, funcionando como indicadores precoces de possíveis drifts.

Este trabalho demonstra a aplicação prática dessas estruturas em análise de séries temporais financeiras, utilizando uma base de dados de preços de Bitcoin com 2880 registros. Implementamos dois algoritmos: um para cálculo de médias móveis com janelas deslizantes usando filas, e outro para detecção de valores críticos com pilhas. Ambos foram desenvolvidos como aplicativos Shiny interativos, consolidando conhecimentos da disciplina de Estrutura de Dados em um cenário atual e prático.


# Fundamentação Teórica

### Janelas Deslizantes com Filas

As **janelas deslizantes** implementadas com filas oferecem uma solução eficiente para processamento de dados em tempo real. Mantendo apenas os últimos `w` elementos do fluxo, essas estruturas garantem economia de memória e processamento eficiente. A cada inserção, o elemento mais antigo é automaticamente descartado, mantendo a janela atualizada e permitindo o cálculo contínuo de estatísticas como médias móveis.

### Detecção de Extremos com Pilhas

**Pilhas** são ideais para identificar máximos e mínimos locais em séries temporais. Utilizando o princípio LIFO, é possível detectar pontos de inflexão que sinalizam mudanças abruptas no comportamento dos dados. Esses extremos funcionam como indicadores precoces de **concept drifts**, permitindo adaptação rápida a mudanças no padrão dos dados.

# Material e Métodos

## Algoritmos Implementados

Neste trabalho, desenvolvemos dois algoritmos principais que exemplificam o uso prático de filas e pilhas em contextos de Online Machine Learning. Ambos os algoritmos foram projetados para processar sequencialmente os dados de preços de Bitcoin, simulando um ambiente de análise em tempo real onde novos dados chegam continuamente e devem ser processados de forma eficiente.

### A Base de Dados

Para validar e demonstrar a eficácia dos algoritmos implementados, utilizamos uma base de dados real de **preços de Bitcoin em dólares americanos (BTC/USD)**. A base de dados é composta por 2880 registros, um por minuto ao longo de dois dias. Os valores são atualizados de forma que a cada minuto, um novo valor é inserido na base de dados e o mais antigo é removido. Uma estrutura de dados que atenda a essas necessidades é a fila de tamanho fixo, que permite a inserção e remoção de elementos de forma eficiente, garantindo que a base de dados sempre contenha apenas os últimos 2880 valores. No gráfico abaixo, podemos visualizar a série temporal dos preços do Bitcoin ao longo dos dois dias.	

```{python}
import pandas as pd
df = pd.read_csv('dados/db_bitcoin_1dia.csv')

# Gráfico interativo
import plotly.express as px

# Filtrar apenas a coluna de preços do BTC
df_btc = df[['Date', 'Close']]

# Criar gráfico interativo com tema mínimo e sem fundo
fig = px.line(df_btc, x='Date', y='Close', title='Preço do Bitcoin', template='plotly_white')

# Mostrar gráfico
fig.show()
```


## Implementação

Os algoritmos foram implementados em Python utilizando as bibliotecas `pandas`, `plotly` e `scipy`. Ambos foram desenvolvidos como aplicativos Shiny interativos para facilitar a visualização e análise dos resultados.

### Algoritmo de Médias Móveis com Janelas Deslizantes

O primeiro aplicativo permite explorar médias móveis com janelas deslizantes em tempo real. O usuário pode ajustar o tamanho da janela (2-50 períodos) através de um controle deslizante e escolher qual variável analisar (fechamento, abertura, máxima, mínima ou volume). 

O aplicativo implementa uma fila que mantém apenas os últimos N valores conforme especificado, calculando continuamente a média móvel. O gráfico exibe simultaneamente a série original e sua média móvel, incluindo funcionalidade de zoom interativo para análise detalhada de períodos específicos.

![Visualização do algoritmo de médias móveis](img/1.png)

### Algoritmo de Detecção de Valores Críticos com Pilhas

O segundo aplicativo identifica máximos e mínimos locais usando pilhas para armazenar os valores críticos. O usuário pode carregar dados próprios via upload CSV ou utilizar a base padrão de Bitcoin. Um controle de sensibilidade ajusta a proeminência dos picos, definindo quão significativo deve ser um ponto para ser considerado extremo local.

O algoritmo utiliza a biblioteca scipy para identificar pontos críticos, organizando-os em duas pilhas LIFO. O aplicativo apresenta três visualizações: gráfico principal com extremos marcados por triângulos coloridos, tabela da pilha de máximos e tabela da pilha de mínimos, ambas ordenadas cronologicamente do mais recente para o mais antigo. Informações estatísticas são exibidas na barra lateral, incluindo número de registros e extremos identificados.

![Visualização do algoritmo de detecção de valores críticos](img/2.png)

::: {.callout-tip}
## Aplicativos Shiny

Ambos aplicativos podem ser encontrados clicando [aqui](https://github.com/bonijoao/trabalho_final_estrutura_de_dados)

:::

# Análise de Desempenho

A análise assintótica dos algoritmos implementados revela limitações significativas em termos de eficiência computacional, especialmente para aplicações com grandes volumes de dados em tempo real.

## Algoritmo de Médias Móveis

O algoritmo de médias móveis apresenta **complexidade de tempo O(N × n)**, onde N representa o tamanho da série temporal e n o tamanho da janela deslizante. Para cada novo elemento processado, o algoritmo executa O(n) operações para calcular a média dos elementos na janela, além de O(1) para as operações de inserção e remoção na fila. Esta implementação torna-se **ineficiente para janelas grandes**, pois o tempo de processamento cresce linearmente com o tamanho da janela.

Em termos de **complexidade de espaço**, o algoritmo é mais eficiente, utilizando apenas **O(n)** memória para armazenar os elementos da janela atual. Apesar da economia de memória, o algoritmo não é adequado para cenários de Online Machine Learning que exigem processamento em tempo real de grandes fluxos de dados.

## Algoritmo de Detecção de Valores Críticos

O algoritmo de detecção de extremos com pilhas apresenta **complexidade de tempo variável**. No melhor caso, com séries monotônicas, a complexidade é **O(N)**, pois cada elemento é processado apenas uma vez. Entretanto, no pior caso, com séries alternantes, a complexidade pode degradar para **O(N²)**, tornando o algoritmo impraticável para grandes volumes de dados.

A **complexidade de espaço** também varia significativamente: **O(1)** no melhor caso para séries monotônicas, mas **O(N)** no pior caso quando todos os elementos são considerados extremos locais. Esta variabilidade torna o algoritmo inadequado para aplicações que requerem garantias de desempenho consistente.

## Limitações Identificadas

| Aspecto | Médias Móveis | Valores Críticos |
|---------|---------------|-------------------|
| **Melhor Caso** | O(N × n) | O(N) |
| **Pior Caso** | O(N × n) | O(N²) |
| **Memória** | O(n) | O(N) |

Ambos os algoritmos apresentam **limitações significativas** para processamento de séries temporais extensas. O algoritmo de médias móveis sofre com o recálculo constante das médias, enquanto o algoritmo de detecção de extremos pode degradar drasticamente em cenários com alta variabilidade nos dados.

# Considerações Finais

Os algoritmos implementados demonstraram de forma prática as estruturas de dados clássicas no processamento de dados em tempo real, validando os conceitos estudados na disciplina de Estrutura de Dados. A implementação de filas e pilhas para análise de séries temporais evidenciou tanto o potencial quanto as limitações dessas estruturas em cenários reais.

A análise de desempenho revelou limitações dos algoritmos implementados. **Propostas de melhoria incluem**: algoritmos de média móvel incremental para reduzir complexidade temporal; estruturas mais sofisticadas como árvores de segmento para consultas eficientes; técnicas de sampling para reduzir volume de dados; e otimização através de paralelização.

A implementação em aplicativos Shiny demonstrou a viabilidade de criar ferramentas práticas para análise de dados em tempo real, reforçando a importância das estruturas de dados fundamentais na construção de sistemas de aprendizado de máquina online, ainda que com as limitações de desempenho identificadas.

# Referências

- Bartz, E., & Bartz-Beielstein, T. (2024). *Online Machine Learning: Methodologies and Applications*. Springer.

- Cormen, T. H., Leiserson, C. E., Rivest, R. L., & Stein, C. (2009). *Introduction to Algorithms* (3rd ed.). MIT Press.

- Gama, J., Žliobaitė, I., Bifet, A., Pechenizkiy, M., & Bouchachia, A. (2014). A survey on concept drift adaptation. *ACM Computing Surveys*, 46(4), 1-37.

- Pandas Development Team. (2024). *pandas: powerful Python data analysis toolkit*. https://pandas.pydata.org/

- Plotly Technologies Inc. (2024). *Plotly Python Open Source Graphing Library*. https://plotly.com/python/

- Posit Team. (2024). *Shiny for Python*. https://shinylive.io/py/

- SciPy Community. (2024). *SciPy: Scientific Computing Tools for Python*. https://scipy.org/

- Virtanen, P., Gommers, R., Oliphant, T. E., et al. (2020). SciPy 1.0: fundamental algorithms for scientific computing in Python. *Nature Methods*, 17(3), 261-272.
